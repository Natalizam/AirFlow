from datetime import timedelta, datetimefrom textwrap import dedentfrom airflow import DAGfrom airflow.operators.bash import BashOperatorfrom airflow.operators.python_operator import PythonOperatorwith DAG(        'home work 1',        # Параметры по умолчанию для тасок        default_args={            # Если прошлые запуски упали, надо ли ждать их успеха            'depends_on_past': False,            # Кому писать при провале            'email': ['airflow@example.com'],            # А писать ли вообще при провале?            'email_on_failure': False,            # Писать ли при автоматическом перезапуске по провалу            'email_on_retry': False,            # Сколько раз пытаться запустить, далее помечать как failed            'retries': 2,            # Сколько ждать между перезапусками            'retry_delay': timedelta(minutes=5),  # timedelta из пакета datetime    },    # Описание DAG (не тасок, а самого DAG)    description='A simple tutorial DAG of homework of Lesson 11',    # Как часто запускать DAG    schedule_interval=timedelta(days=1),    # С какой даты начать запускать DAG    # Каждый DAG "видит" свою "дату запуска"    # это когда он предположительно должен был    # запуститься. Не всегда совпадает с датой на вашем компьютере    start_date=datetime(2022, 4, 1),    # Запустить за старые даты относительно сегодня    # https://airflow.apache.org/docs/apache-airflow/stable/dag-run.html    catchup=False,    # теги, способ помечать даги    tags=['example']) as dag:        date = "{{ ds }}" # создаем переменну date и присваиваем ей значение переменной ds        t1 = BashOperator(        task_id='print_pwd',  # id, будет отображаться в интерфейсе        bash_command='pwd',  # какую bash команду выполнить в этом таске    )        t1.doc_md = dedent(        """        Print working directory as bash command `pwd`        """        )        dag.doc_md = """    This is dag of 2 tasks and 2 operators: BashOperator and PythonOperator        """        #Создаем функцию для PythonOperator, так как он вызывает Python функции с аргументом ds - печатем дату    def print_ds(ds):        print(ds)            t2 = PythonOperator(        task_id='print_ds', # нужен task_id, как и всем операторам        python_callable=print_ds,  # свойственен только для PythonOperator - передаем саму функцию    )        t2.doc_md = """    В Airflow имеется логическая дата (передается как ds). Она говорит, какую дату обрабатывает конкретный запуск.    Логическая дата не всегда совпадает с датой запуска! В нормальном функционировании Airflow запускает даг после окончания логической даты, чтобы убедиться в доступности всех данных.    Например, если даг настроен на ежедневный запуск, то в день 2022-02-12 даг запустится с логической датой 2022-02-11 (вчера), потому что за 12-ое число данных еще может не быть.    """        # А вот так в Airflow указывается последовательность задач    t1 >> t2